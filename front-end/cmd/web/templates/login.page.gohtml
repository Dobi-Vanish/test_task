{{template "base" .}}

{{define "content" }}
    <div class="container">
        <div class="row">
            <div class="col">
                <hr>
                <a id="brokerBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Broker</a>
                <a id="logBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Log</a>
                <a id="logGBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test gRPC log</a>
                <div id="output" class="mt-5" style="outline: 1px solid silver; padding: 2em;">
                    <span class="text-muted">Output shows here...</span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h4 class="mt-5">Sent</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="payload"><span class="text-muted">Nothing sent yet...</span></pre>
                </div>
            </div>
            <div class="col">
                <h4 class="mt-5">Received</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="received"><span class="text-muted">Nothing received yet...</span></pre>
                </div>
            </div>
        </div>
        <h1 class="mt-3">Login</h1>

        <form method="post" action="/auth" novalidate>

            <div class="form-group mt-3">
                <label for="email">Email (admin@example.com)</label>
                {{with .Form.Errors.Get "email"}}
                    <label class="text-danger">{{.}}</label>
                {{end}}
                <input class="form-control {{with .Form.Errors.Get "email"}} is-invalid {{end}}"
                       id="email" autocomplete="off" type='email'
                       name='email' value="" required>
            </div>

            <div class="form-group">
                <label for="password">Password (verysecret)</label>
                {{with .Form.Errors.Get "password"}}
                    <label class="text-danger">{{.}}</label>
                {{end}}
                <input class="form-control {{with .Form.Errors.Get "password"}} is-invalid {{end}}"
                       id="password" autocomplete="off" type='password'
                       name='password' value="" required>
            </div>

            <hr>

            <a id="authBrokerBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Auth</a>

        </form>
    </div>
{{end}}

{{define "js"}}
    <script>
        let brokerBtn = document.getElementById("brokerBtn");
        let authBrokerBtn = document.getElementById("authBrokerBtn");
        let logBtn = document.getElementById("logBtn")
        let logGBtn = document.getElementById("logGBtn")
        let output = document.getElementById("output");
        let sent = document.getElementById("payload");
        let received = document.getElementById("received");

        logGBtn.addEventListener("click", function (){
            const payload = {
                action: "log",
                log: {
                    name: "event",
                    data: "some kind of gRPC data",
                }
            }
            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("http:\/\/localhost:8080/log-grpc", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = JSON.stringify(payload, undefined, 4);
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>Error:</strong> ${data.message}`;
                    } else {
                        output.innerHTML += `<br><strong>Response from gRPC service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Error: " + error;
                })
        })

        logBtn.addEventListener("click", function (){
            const payload = {
                action: "log",
                log: {
                    name: "event",
                    data: "some kind of data",
                }
            }
            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("http:\/\/localhost:8080/handle", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = JSON.stringify(payload, undefined, 4);
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>Error:</strong> ${data.message}`;
                    } else {
                        output.innerHTML += `<br><strong>Response from logger service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Error: " + error;
                })
        })

        authBrokerBtn.addEventListener("click", function() {

            const emailValue = document.getElementById("email").value;
            const passwordValue = document.getElementById("password").value;

            const payload = {
                action: "auth",
                auth: {
                    email: emailValue, //"admin@example.com",
                    password: passwordValue, //"verysecret",
                }
            }

            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: 'POST',
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("http:\/\/localhost:8080/handle", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = JSON.stringify(payload, undefined, 4);
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>Error:</strong> ${data.message}`;
                    } else {
                        output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Eror: " + error;
                })
        })

        brokerBtn.addEventListener("click", function() {

            const body = {
                method: 'POST',
            }

            fetch("http:\/\/localhost:8080", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML ="empty post request";
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        console.log(data.message);
                    } else {
                        output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Eror: " + error;
                })
        })

    </script>
{{end}}
